#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T>
[[clang::optnone]] T spvFAdd(T l, T r)
{
    return fma(T(1), l, r);
}

struct SSBO
{
    float v[4];
    half f16[4];
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(4u, 1u, 1u);

kernel void main0(device SSBO& _9 [[buffer(0)]], uint gl_LocalInvocationIndex [[thread_index_in_threadgroup]])
{
    _9.v[gl_LocalInvocationIndex] = precise::cos(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += sin(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += tan(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += acos(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += asin(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += atan(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += exp(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += exp2(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += log(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += log2(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += sqrt(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += rsqrt(_9.v[gl_LocalInvocationIndex]);
    _9.v[gl_LocalInvocationIndex] += powr(_9.v[gl_LocalInvocationIndex], 4.0);
    _9.f16[gl_LocalInvocationIndex] = cos(_9.f16[gl_LocalInvocationIndex]);
    _9.f16[gl_LocalInvocationIndex] = spvFAdd(_9.f16[gl_LocalInvocationIndex], sin(_9.f16[gl_LocalInvocationIndex]));
    _9.f16[gl_LocalInvocationIndex] = spvFAdd(_9.f16[gl_LocalInvocationIndex], half(precise::cosh(float(_9.f16[gl_LocalInvocationIndex]))));
    _9.f16[gl_LocalInvocationIndex] = spvFAdd(_9.f16[gl_LocalInvocationIndex], half(precise::sinh(float(_9.f16[gl_LocalInvocationIndex]))));
}

