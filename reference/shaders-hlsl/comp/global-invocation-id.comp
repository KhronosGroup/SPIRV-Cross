struct myBlock
{
    int a;
    float b[1];
};

RWStructuredBuffer<myBlock> myStorage : register(u0);

static uint3 gl_GlobalInvocationID;
struct SPIRV_Cross_Input
{
    uint3 gl_GlobalInvocationID : SV_DispatchThreadID;
};

float mod(float x, float y)
{
    return x - y * floor(x / y);
}

void comp_main()
{
    myStorage[0].a = (myStorage[0].a + 1) % 256;
    myStorage[0].b[gl_GlobalInvocationID.x] = mod(myStorage[0].b[gl_GlobalInvocationID.x] + 0.0199999995529651641845703125f, 1.0f);
}

[numthreads(1, 1, 1)]
void main(SPIRV_Cross_Input stage_input)
{
    gl_GlobalInvocationID = stage_input.gl_GlobalInvocationID;
    comp_main();
}
